{"version":3,"sources":["components/AddCharacters.js","helpers/FetchQuotes.js","components/QuotesItem.js","components/CharacterRender.js","hooks/useQuoteFetch.js","BreakingBadApp.js","index.js"],"names":["AddCharacters","setCharacters","useState","InputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","char","alert","type","onChange","input","target","value","quoteFetch","character","a","url","encodeURI","fetch","resp","json","data","quotes","map","quote","author","quote_id","series","QuotesItem","href","CharacterRender","loading","state","setstate","useEffect","then","console","log","useQuoteFetch","BreakingBadApp","characters","ReactDOM","render","document","getElementById"],"mappings":"uMAmCeA,EAjCO,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cACpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,UAAU,GAAGC,SAbF,SAACC,GAClBA,EAAEC,iBACCL,EAAWM,OAAOC,OAAS,GAC5BT,GAAc,SAAAU,GAAI,OAAIR,GAAJ,mBAAkBQ,OACpCP,EAAc,KAEZQ,MAAM,wBAEVR,EAAc,KAKd,SACI,uBACAS,KAAM,OACNC,SApBoB,SAACP,GACzB,IAAMQ,EAAQR,EAAES,OAAOC,MACtBb,EAAcW,IAmBXE,MAASd,O,+BCxBPe,EAAU,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,6DACjBC,EADiB,0DACwCC,UAAUH,IADlD,SAEHI,MAAMF,GAFH,cAEjBG,EAFiB,gBAGHA,EAAKC,OAHF,cAGjBC,EAHiB,OAKjBC,EAASD,EAAKE,KAAI,SAAAC,GACpB,MAAO,CACHC,OAAOD,EAAMC,OACbD,MAAMA,EAAMA,MACZE,SAASF,EAAME,SACfC,OAAOH,EAAMG,WAVE,kBAchBL,GAdgB,2CAAH,sDCCXM,EAAa,SAAC,GAAoC,IAAnCJ,EAAkC,EAAlCA,MAAsBC,GAAY,EAA5BC,SAA4B,EAAnBC,OAAmB,EAAZF,QAG9C,OACI,mCAEI,qBAAKzB,UAAU,sBAAf,SACI,sBAAKA,UAAU,uEAAf,UACI,oBAAIA,UAAU,sCAAd,4CACA,oBAAGA,UAAU,qBAAb,cACMwB,EADN,OAGA,qBAAKxB,UAAU,OAAf,SACI,oBAAG6B,KAAK,wCAAwC7B,UAAU,sEAA1D,UACI,sBAAMA,UAAU,kBAAhB,SACKyB,IAEL,sBAAMzB,UAAU,eAAhB,iCCwBb8B,EAvCU,SAAC,GAAiB,IAAhBhB,EAAe,EAAfA,UAEvB,ECHyB,SAACA,GAC5B,MAA0BjB,mBAAS,CAC7BwB,KAAK,GACLU,SAAS,IAFf,mBAAOC,EAAP,KAAcC,EAAd,KAiBE,OAbAC,qBAAU,WACNrB,EAAWC,GAAWqB,MAAK,SAAA7B,GACvB8B,QAAQC,IAAI/B,GACZ2B,EAAS,CACLZ,KAAKf,EACLyB,SAAS,SAInB,CAACjB,IAIIkB,EDfgBM,CAAcxB,GAA9BO,EAAP,EAAOA,KAAKU,EAAZ,EAAYA,QAWZ,OACI,qCACI,oBAAI/B,UAAU,WAAd,SAA2Bc,IAExBiB,EAAQ,eAAe,eAKlBV,EAAKE,KAAI,SAAAjB,GAAI,OAET,cAAC,EAAD,eAGQA,GADCA,EAAKoB,iBEAvBa,EA1BQ,WAEnB,MAAoC1C,mBAAS,CAAC,iBAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAKA,OACI,qCACI,qDACA,cAAC,EAAD,CAAeA,cAAiBA,IAChC,uBAEA,oBAAII,UAAU,oBAAd,SAEQwC,EAAWjB,KAAI,SAAAjB,GAAI,OACf,cAAC,EAAD,CAA4BQ,UAAWR,GAAjBA,Y,MCd9CmC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.b746e2c0.chunk.js","sourcesContent":["import React,{useState} from 'react'\nimport PropTypes from 'prop-types';\nconst AddCharacters = ({setCharacters}) => {\n    const [InputValue, setInputValue] = useState('');\n    const handleOnchangeInput = (e)=>{\n        const input = e.target.value\n         setInputValue(input)\n    }\n    const handleSubmit = (e)=>{\n        e.preventDefault();\n        if(InputValue.trim().length > 2){\n          setCharacters(char =>[InputValue,...char]);\n          setInputValue('')  \n        }else{\n            alert('Nombre no encontrado');\n        }\n        setInputValue('') \n        \n\n    }\n    return (\n        <form className='' onSubmit={handleSubmit}>\n            <input \n            type= 'text'\n            onChange = {handleOnchangeInput}\n            value = {InputValue}\n            />\n        </form>\n    )\n}\n\nAddCharacters.propTypes = {\n    setCharacters:PropTypes.func.isRequired\n}\n\nexport default AddCharacters\n","\n export const quoteFetch = async (character) => {\n    const url = `https://www.breakingbadapi.com/api/quote?author=${encodeURI(character)}`;\n    const resp =  await fetch(url);\n    const data =  await resp.json();\n    \n    const quotes = data.map(quote =>{\n        return {\n            author:quote.author,\n            quote:quote.quote,\n            quote_id:quote.quote_id,\n            series:quote.series\n        }\n    \n    })\n    return quotes;\n}","import React from 'react'\n\nexport const QuotesItem = ({quote,quote_id,series,author}) => {\n    \n    \n    return (\n        <>\n        {\n            <div className=\"flex justify-center\" >\n                <div className=\"max-w-lg w-full rounded-lg shadow-lg p-4 bg-white my-10 text-center \">\n                    <h3 className=\"font-semibold text-lg tracking-wide\">Here is link for your payment.</h3>\n                    <p className=\"text-gray-500 my-1\">\n                        \"{quote}\"\n                    </p>\n                    <div className=\"mt-2\">\n                        <a href=\"https://www.imdb.com/title/tt0903747/\" className=\"text-blue-700  inline-flex items-center font-semibold tracking-wide\">\n                            <span className=\"hover:underline\">\n                                {author}\n                            </span>\n                            <span className=\"text-xl ml-2\">&#8594;</span>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        }\n            \n               \n            \n        </>\n    )\n}\n","import React from 'react'\nimport { useQuoteFetch } from '../hooks/useQuoteFetch'\nimport { QuotesItem } from './QuotesItem';\n// import {quoteFetch} from '../helpers/FetchQuotes'\nconst CharacterRender =  ({character}) => {\n    \n    const {data,loading} = useQuoteFetch(character);\n    \n    // const [characters, setCharacters] = useState([]);\n    \n    // useEffect(()=>{\n    //     quoteFetch(character).then(setCharacters)  \n    // },[character])\n\n   \n   \n    \n    return (\n        <>\n            <h3 className=\"text-5xl\" >{character}</h3>\n            \n              {loading?'Loading.....':'Quote loaded'}\n                {\n                    \n                    \n                    \n                    data.map(char =>(\n\n                        <QuotesItem \n                            // char={char}\n                            key={char.quote_id} \n                            {...char}\n                        \n                        />                       \n                    )\n                    )\n                }\n                \n            \n        </>\n    )\n}\n\nexport default CharacterRender\n","import { useState,useEffect } from \"react\";\nimport { quoteFetch } from \"../helpers/FetchQuotes\";\n\nexport const useQuoteFetch = (character) => {\n  const [state, setstate] = useState({\n        data:[],\n        loading: true\n    }) \n    useEffect(() => {\n        quoteFetch(character).then(char=>{\n            console.log(char)\n            setstate({\n                data:char,\n                loading: false\n            })\n        })   \n    \n   }, [character])\n\n    \n   \n    return state\n}\n","import React,{useState} from 'react'\nimport AddCharacters from './components/AddCharacters'\nimport CharacterRender from './components/CharacterRender'\n\nconst BreakingBadApp = () => {\n    //const characters = ['Walter White','Skyler White','Jesse Pikman'];\n    const [characters, setCharacters] = useState(['Walter White'])\n    \n    // const addCharacter = ()=>{\n    //     setcharacters( char => [...characters,'Jesse Pinkman','Skyler White']);// char es el estado anterior\n    // }\n    return (\n        <>\n            <h1>Quotes Breaking Bad</h1>\n            <AddCharacters setCharacters = {setCharacters}/>\n            <hr></hr>\n            \n            <ul className=\"text-center my-10\">\n                {\n                    characters.map(char =>( \n                        <CharacterRender key={char} character={char}/>\n    \n                    ))\n                }\n            </ul>\n            \n        </>\n    )\n}\n\nexport default BreakingBadApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport BreakingBadApp from './BreakingBadApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <BreakingBadApp/>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}